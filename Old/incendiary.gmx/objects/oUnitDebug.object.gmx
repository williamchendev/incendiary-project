<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sUnitTest</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Event

//Settings
canmove = true;
selected = false;
image_speed = 0;
image_index = 1;

moving = false;
pause = false;

//Tiles
tilex = round((x / 32) + 0.5);
tiley = round(((y - 170) / 16) + 0.5);

//Combat
health = 50;  //Health
healthmax = 60;
dead = false;

act = "none";  //Actions
actionspd = 1;
actionmax = 100;

action = actionmax;

ammo = 0;  //Ammo
ammomax = 6;

move_spd = 1.5;

unit_type = irandom_range(0, 7);  //Stats
unit_weapon = irandom_range(1, 4);

//Path
path = path_add();

path_goalx = 0;
path_goaly = 0;

//Image
silalpha = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Face Cover
if (instance_exists(oObstacle)){
    if (distance_to_object(oObstacle) &lt; 18){
        var cover_objleft = instance_position(x - 18, y, oObstacle);
        var cover_objright = instance_position(x + 18, y, oObstacle);
        
        if (cover_objleft != noone){
            if (cover_objright != noone){
                var cover_left_x = floor(sign(cover_objleft.x - x));
                var cover_right_x = floor(sign(cover_objright.x - x));
            }
            else {
                image_xscale = floor(sign(cover_objleft.x - x));
            }
        }
        else if (cover_objright != noone){
            image_xscale = floor(sign(cover_objright.x - x));
        }
    }
}

//Face Movement
if (floor(sign(x - xprevious)) != 0){
    image_xscale = floor(sign(x - xprevious));
}

x = round(x);
y = round(y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step Event
if (instance_exists(oSystem)){
    pause = oSystem.pause;
}

//Image
depth = -y;

//Tiles
tilex = round((x / 32) + 0.5) - 1;
tiley = round(((y - 170) / 16) + 0.5);

if (!pause){
    //Check Moving
    if (moving){
        if (path_position == 1){
            moving = false;
            path = path_add();
        }
    }
    
    //Action
    action += actionspd;
    action = clamp(action, 0, actionmax);
    if (act == "reloading"){
        if (action == actionmax){
            ammo = ammomax;
            act = "none";
        }
    }
    
    //Perform Action
    if(canmove){
        if (action == actionmax){
            if (keyboard_check_pressed(ord("K"))){
                if (ammo &lt; ammomax){
                    action = 0;
                    act = "reloading";
                    selected = false;
                }
            }
        }
    }
    else{
    
    }
    
    //Tile Lock
    if (moving != true){
        x += (((tilex * 32) + 16) - x) * 0.05;
        y += (((tiley * 16) + 162) - y) * 0.05;
    }
}
else {
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw End

//Silhouette
if (selected){
    silalpha += 0.008;
    if (silalpha &gt; 1){
        silalpha = 0;
    }
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_black, 0.5 - (0.5 * sin(silalpha * (2 * pi))));
}

if (instance_exists(oObstacle)){
    var cover_objleft = instance_position(x - 18, y, oObstacle);
    var cover_objright = instance_position(x + 18, y, oObstacle);
    if (cover_objleft != noone){
        if (cover_objright != noone){
            var cover_left_x = floor(sign(cover_objleft.x - x));
            var cover_right_x = floor(sign(cover_objright.x - x));
        }
        else {
            draw_sprite(sButton, 0, x, y - 20)
        }
    }
    else if (cover_objright != noone){
        draw_sprite(sButton, 1, x, y - 20)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (pause){
    if (path_position != 1){
        draw_path(path, x, y, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Event

//Self
if (act == "none"){
    image_index = 1;
}
else if (act == "attacking"){
    image_index = 2;
}
else if (act == "reloading"){
    image_index = 3;
}

draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha);

//Ammo Num
if (action &lt; actionmax){
    draw_sprite(sActionBar, 0, x, y - 42);
    draw_rectangle(x - 14, y - 44, (x - 14) + (27 * (action / actionmax)), y - 41, false);
}
else{
    draw_set_color(c_white);
    draw_set_font(RegularFont);
    draw_set_halign(fa_center);
    draw_text(x + 1, y - 48, string(ammo));
    draw_set_halign(fa_left);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
