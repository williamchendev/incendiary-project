<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sInspect</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

//Settings
inspect_type = 0;

action = instance_create(x, y, oAction);
action.action_type = 1;

selected = false;

inspecting = false;
useful = false;
inspect_event = false;
event = 0;

//Text Event
type = 0;
text_font = RegularFont;
text_displace_y = 50;

inspect_text = noone;
inspect_text[0, 0] = "...";
inspect_text[0, 1] = x;
inspect_text[0, 2] = y;
inspect_text[0, 3] = c_white;

inspect_text[1, 0] = "...";
inspect_text[1, 1] = x;
inspect_text[1, 2] = y;
inspect_text[1, 3] = c_white;

inspect_text[2, 0] = "...";
inspect_text[2, 1] = x;
inspect_text[2, 2] = y;
inspect_text[2, 3] = c_white;

useless_text = noone;
useless_text[0, 0] = "...";
useless_text[0, 1] = x;
useless_text[0, 2] = y;
useless_text[0, 3] = c_white;

useless_text[1, 0] = "...";
useless_text[1, 1] = x;
useless_text[1, 2] = y;
useless_text[1, 3] = c_white;

useless_text[2, 0] = "...";
useless_text[2, 1] = x;
useless_text[2, 2] = y;
useless_text[2, 3] = c_white;

move_x = x;
move_y = y - 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step Event

//Settings
depth = -y;
action.x = x;
action.y = y - ((sprite_height div 2) + 8);
action.selected = selected;
draw_set_font(text_font);

if (inspect_type == 1){
    if (inspect_event){
        inspect_event = false;
    }
}

//Clicked &amp; Character Move Script
if (action.clicked){
    with(oItem){
        selected = false;
    }
    with(oInspect){
        selected = false;
    }
    with(oNPC){
        selected = false;
    }
    AnnaMoveScript(move_x, move_y);
    action.clicked = false;
    selected = true;
}

//Selected &amp; Character Touch Event
if (selected){
    if (!oAnna.moving){
        selected = false;
    }
    else {
        if (abs(oAnna.x - move_x) &lt; 1){
            if (abs(oAnna.y - move_y) &lt; 1){
                oAnna.canmove = false;
                oAnna.moving = false;
                inspecting = true;
                event = 0;
            }
        }
    }
}

if (inspecting){
    if (!instance_exists(oText)){
        if (useful){
            if (event &lt; array_height_2d(inspect_text)){
                if (type == 0){
                        inspect_text[event, 1] = oAnna.x;
                        inspect_text[event, 2] = oAnna.y - (text_displace_y + (string_height_ext(inspect_text[event, 0], -1, 120) / 2));
                        inspect_text[event, 3] = c_white;
                }
                TextScript(inspect_text[event, 1], inspect_text[event, 2], inspect_text[event, 0], inspect_text[event, 3], 0.35);
                event++;
            }
            else {
                oAnna.canmove = true;
                inspect_event = true;
                inspecting = false;
                selected = false;
            }
        }
        else {
            if (event &lt; array_height_2d(useless_text)){
                if (type == 0){
                        useless_text[event, 1] = oAnna.x;
                        useless_text[event, 2] = oAnna.y - (text_displace_y + (string_height_ext(useless_text[event, 0], -1, 120) / 2));
                        useless_text[event, 3] = c_white;
                }
                TextScript(useless_text[event, 1], useless_text[event, 2], useless_text[event, 0], inspect_text[event, 3], 0.35);
                event++;
            }
            else {
                oAnna.canmove = true;
                inspecting = false;
                selected = false;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Event

//Action
if (distance_to_point(mouse_x, mouse_y) &lt;= (sprite_width - (sprite_width div 2.2))){
    //Player
    if (instance_exists(oAnna)){
        //Outline
        if (oAnna.canmove){
            if (!selected){
                OutlineScript(sprite_index, image_index);
            }
        }
    }
    action.prox = true;
}
else {
    action.prox = false;
}

//Draw Self
draw_sprite(sprite_index, image_index, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
