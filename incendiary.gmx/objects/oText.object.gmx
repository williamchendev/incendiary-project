<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100005</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

//Variables
text = "";
text_color = c_white;
text_limit = 120;
spd = 0.35;

//Settings
exist = true;
alpha = 0;
time = 0;

sin_val = random_range(0, 1);

move_x = 0;
move_y = 0;

border_width = 4;
border_height = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step Event

//Draw Variables
if (sin_val &lt; 1){
    sin_val += 0.007;
}
else {
    sin_val = 0;
}

x = round(x);
y = round(y);

move_x = clamp(((sin(sin_val * 2 * pi) + 1) / 2) * 3.3, 0.01, 4);
move_y = clamp(((cos(sin_val * 2 * pi) + 1) / 2) * 3.3, 0.01, 4);

//Alpha
if (exist){
    if (alpha &lt; 1){
        alpha += 0.001;
        alpha *= 1.15;
    }
    
    if (alpha &gt; 0.7){
        if (time &lt; string_length(text)){
            time += spd;
        }
    }
}
else {
    if (alpha &gt; 0){
        alpha -= 0.001;
        alpha *= 0.85;
    }
    else {
        instance_destroy();
    }
}

//Destroy
if (instance_exists(oAnna)){
    if (oAnna.mouse_click){
        if (time &gt;= string_length(text)){
            exist = false;
        }
        else {
            time = string_length(text);
        }
    }
}

alpha = clamp(alpha, 0, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Event

//Black Rectangle
draw_set_alpha(alpha);
draw_set_color(c_black);
var corner_radius_sin = ((sin(sin_val * 2 * pi) + 1) / 2) * (string_width_ext(text, -1, text_limit) / 3);
var corner_radius_cos = ((cos(sin_val * 2 * pi) + 1) / 2) * (string_height_ext(text, -1, text_limit) / 3);
draw_roundrect_ext(x - ((string_width_ext(text, -1, text_limit) / 2) + border_width + move_x), y - ((string_height_ext(text, -1, text_limit) / 2) + border_height + move_x), x + ((string_width_ext(text, -1, text_limit) / 2) + border_width + move_x), y + ((string_height_ext(text, -1, text_limit) / 2) + border_height + move_x), corner_radius_sin + 10, corner_radius_cos + 10, false);

//Text
draw_set_color(text_color);
draw_set_font(RegularFont);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

draw_set_alpha(alpha * 0.3);
draw_text_ext(x + 1, y + 1, string_copy(text, 0, clamp(time, 0, string_length(text))), -1, text_limit);
draw_set_alpha(alpha);
draw_text_ext(x + 1, y, string_copy(text, 0, clamp(time, 0, string_length(text))), -1, text_limit);

draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_black);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
